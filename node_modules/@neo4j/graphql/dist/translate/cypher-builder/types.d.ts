import type { Variable } from "./variables/Variable";
import type { Operation } from "./operations/Operation";
import type { PropertyRef } from "./PropertyRef";
import type { CypherFunction } from "./functions/CypherFunction";
import type { Literal } from "./variables/Literal";
import type { Exists } from "./expressions/Exists";
import type { CypherEnvironment } from "./Environment";
import type { ComprehensionExpr } from "./list/ComprehensionExpr";
import type { MapExpr } from "./variables/map/MapExpr";
import type { BooleanOp } from "./operations/boolean";
import type { ComparisonOp } from "./operations/comparison";
import type { RawCypher } from "./clauses/RawCypher";
import type { PredicateFunction } from "./functions/PredicateFunctions";
import type { ValidatePredicate } from "./procedures/apoc/apoc";
export declare type Expr = Operation | Variable | PropertyRef | CypherFunction | Literal | Predicate | ComprehensionExpr | MapExpr;
/** Represents a predicate statement (i.e returns a boolean). Note that RawCypher is only added for compatibility */
export declare type Predicate = BooleanOp | ComparisonOp | RawCypher | Exists | PredicateFunction | ValidatePredicate | Literal<boolean>;
export declare type CypherResult = {
    cypher: string;
    params: Record<string, string>;
};
/** Defines the interface for a class that can be compiled into Cypher */
export interface CypherCompilable {
    getCypher(env: CypherEnvironment): string;
}
//# sourceMappingURL=types.d.ts.map